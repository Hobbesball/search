diff --git a/lucene/common-build.xml b/lucene/common-build.xml
index b655def..f502d5c 100644
--- a/lucene/common-build.xml
+++ b/lucene/common-build.xml
@@ -186,9 +186,9 @@
   <property name="javadoc.maxmemory" value="512m" />
   <property name="javadoc.noindex" value="true"/>
 
-  <property name="javadoc.doclint.args" value="-Xdoclint:all -Xdoclint:-missing"/>
+  <property name="javadoc.doclint.args" value="-Xdoclint:all -Xdoclint:-missing -Xdoclint:-accessibility"/>
   <!---proc:none was added because of LOG4J2-1925 / JDK-8186647 -->
-  <property name="javac.doclint.args" value="-Xdoclint:all/protected -Xdoclint:-missing -proc:none"/>
+  <property name="javac.doclint.args" value="-Xdoclint:all/protected -Xdoclint:-missing -Xdoclint:-accessibility -proc:none"/>
   
   <!-- Javadoc classpath -->
   <path id="javadoc.classpath">
diff --git a/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java b/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java
index 2e1c483..a0e7b53 100644
--- a/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java
@@ -45,7 +45,7 @@ public class PostingsSolrHighlighter extends UnifiedSolrHighlighter {
   }
 
   @Override
-  protected UnifiedHighlighter getHighlighter(SolrQueryRequest req) {
+  protected SolrExtendedUnifiedHighlighter getHighlighter(SolrQueryRequest req) {
     // Adjust the highlight parameters to match what the old PostingsHighlighter had.
     ModifiableSolrParams invariants = new ModifiableSolrParams();
     invariants.set(HighlightParams.OFFSET_SOURCE, "POSTINGS");
diff --git a/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java b/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
index c1ca14b..3f98cb5 100644
--- a/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
@@ -18,13 +18,18 @@ package org.apache.solr.highlight;
 
 import java.io.IOException;
 import java.text.BreakIterator;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.EnumSet;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.FieldInfo;
@@ -33,6 +38,7 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.uhighlight.CustomSeparatorBreakIterator;
 import org.apache.lucene.search.uhighlight.DefaultPassageFormatter;
 import org.apache.lucene.search.uhighlight.LengthGoalBreakIterator;
+import org.apache.lucene.search.uhighlight.Passage;
 import org.apache.lucene.search.uhighlight.PassageFormatter;
 import org.apache.lucene.search.uhighlight.PassageScorer;
 import org.apache.lucene.search.uhighlight.UnifiedHighlighter;
@@ -43,6 +49,7 @@ import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.core.PluginInfo;
+import org.apache.solr.highlight.UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter.PassagesContentPair;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.SchemaField;
@@ -145,16 +152,17 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
       maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);
     }
 
-    UnifiedHighlighter highlighter = getHighlighter(req);
-    Map<String, String[]> snippets = highlighter.highlightFields(fieldNames, query, docIDs, maxPassages);
-    return encodeSnippets(keys, fieldNames, snippets);
+    SolrExtendedUnifiedHighlighter highlighter = getHighlighter(req);
+    Map<String, PassagesContentPair[]> snippets = highlighter.highlightFieldsAsPassages(fieldNames, query, docIDs, maxPassages);
+    return encodeResponse(keys, fieldNames, snippets, params);
   }
 
   /**
    * Creates an instance of the Lucene {@link UnifiedHighlighter}. Provided for subclass extension so that
    * a subclass can return a subclass of {@link SolrExtendedUnifiedHighlighter}.
+   * @return
    */
-  protected UnifiedHighlighter getHighlighter(SolrQueryRequest req) {
+  protected SolrExtendedUnifiedHighlighter getHighlighter(SolrQueryRequest req) {
     return new SolrExtendedUnifiedHighlighter(req);
   }
 
@@ -163,21 +171,52 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
    *
    * @param keys       the document unique keys
    * @param fieldNames field names to highlight in the order
-   * @param snippets   map from field name to snippet array for the docs
+   * @param fieldToPassagesInfo   map from field name to snippet array for the docs
    * @return encoded namedlist of summaries
    */
-  protected NamedList<Object> encodeSnippets(String[] keys, String[] fieldNames, Map<String, String[]> snippets) {
+  protected NamedList<Object> encodeResponse(String[] keys, String[] fieldNames, Map<String, PassagesContentPair[]> fieldToPassagesInfo, SolrParams params) {
+    boolean extended = params.getBool("hl.extended", false);//nocommit use constant
+
+    Map<String, PassageFormatter> fieldToFormatter = new HashMap<>(fieldNames.length);
+    for (String fieldName : fieldNames) {
+      fieldToFormatter.put(fieldName, getActualPassageFormatter(params, fieldName));
+    }
+
     NamedList<Object> list = new SimpleOrderedMap<>();
     for (int i = 0; i < keys.length; i++) {
       NamedList<Object> summary = new SimpleOrderedMap<>();
       for (String field : fieldNames) {
-        String snippet = snippets.get(field)[i];
-        if (snippet == null) {
+        PassagesContentPair pair = fieldToPassagesInfo.get(field)[i];
+        if (pair !=null){
+          // Format the Passages with Content into a String
+          String snippetJoined = (String) fieldToFormatter.get(field).format(pair.passages, pair.content);
           //TODO reuse logic of DefaultSolrHighlighter.alternateField
-          summary.add(field, ZERO_LEN_STR_ARRAY);
-        } else {
-          // we used a special snippet separator char and we can now split on it.
-          summary.add(field, snippet.split(SNIPPET_SEPARATOR));
+          String[] snippets;
+          if (snippetJoined == null) {
+            snippets = ZERO_LEN_STR_ARRAY;
+          } else {
+            snippets = snippetJoined.split(SNIPPET_SEPARATOR);
+          }
+
+          if (extended) {
+            //TODO SimpleOrderedMap?
+            NamedList<Object> extendedInfo = new NamedList<>();
+            extendedInfo.add("snippets", snippets);
+            List<NamedList> passageList = new ArrayList<>(pair.passages.length);
+            for (Passage passage : pair.passages) {
+              NamedList<Object> passageNl = new NamedList<>();
+              passageNl.add("startOffsetUtf16", passage.getStartOffset());
+              passageNl.add("matchStartsUtf16", IntStream.of(passage.getMatchStarts()).boxed().collect(Collectors.toList()));
+              passageNl.add("matchEndsUtf16", IntStream.of(passage.getMatchEnds()).boxed().collect(Collectors.toList()));
+              //TODO
+              passageList.add(passageNl);
+            }
+            extendedInfo.add("passages", passageList);
+
+            summary.add(field, extendedInfo);
+          } else {
+            summary.add(field, snippets);
+          }
         }
       }
       list.add(keys[i], summary);
@@ -253,6 +292,24 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
       loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.
     }
 
+    public Map<String, PassagesContentPair[]> highlightFieldsAsPassages(String[] fieldsIn, Query query, int[] docidsIn, int[] maxPassagesIn)
+        throws IOException {
+      Map<String, PassagesContentPair[]> result = new HashMap<>();
+      for (Map.Entry<String, Object[]> ent : highlightFieldsAsObjects(fieldsIn, query, docidsIn, maxPassagesIn).entrySet()) {
+        Object[] passageObjects = ent.getValue();
+        PassagesContentPair[] passages = new PassagesContentPair[passageObjects.length];
+        result.put(ent.getKey(), passages);
+        for (int i = 0; i < passageObjects.length; i++) {
+          Object passagesContentObj = passageObjects[i];
+          if (passagesContentObj != null) {
+            passages[i] = (PassagesContentPair) passagesContentObj;
+          }
+        }
+      }
+
+      return result;
+    }
+
     @Override
     protected OffsetSource getOffsetSource(String field) {
       String sourceStr = params.getFieldParam(field, HighlightParams.OFFSET_SOURCE);
@@ -279,18 +336,24 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
       }
     }
 
+    static class PassagesContentPair {
+      final Passage[] passages;
+      final String content;
+
+      public PassagesContentPair(Passage[] passages, String content) {
+        this.passages = passages;
+        this.content = content;
+      }
+    }
+
     @Override
     protected PassageFormatter getFormatter(String fieldName) {
-      String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE,
-          params.getFieldParam(fieldName, HighlightParams.SIMPLE_PRE, "<em>")
-      );
-
-      String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST,
-          params.getFieldParam(fieldName, HighlightParams.SIMPLE_POST, "</em>")
-      );
-      String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, SNIPPET_SEPARATOR);
-      String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, "simple");
-      return new DefaultPassageFormatter(preTag, postTag, ellipsis, "html".equals(encoder));
+      return new PassageFormatter() {
+        @Override
+        public Object format(Passage[] passages, String content) {
+          return new PassagesContentPair(passages, content);
+        }
+      };
     }
 
     @Override
@@ -423,4 +486,17 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
     }
   }
 
+  protected PassageFormatter getActualPassageFormatter(SolrParams params, String fieldName) {
+    String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE,
+        params.getFieldParam(fieldName, HighlightParams.SIMPLE_PRE, "<em>")
+    );
+
+    String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST,
+        params.getFieldParam(fieldName, HighlightParams.SIMPLE_POST, "</em>")
+    );
+    String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, SNIPPET_SEPARATOR);
+    String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, "simple");
+    return new DefaultPassageFormatter(preTag, postTag, ellipsis, "html".equals(encoder));
+  }
+
 }
\ No newline at end of file
